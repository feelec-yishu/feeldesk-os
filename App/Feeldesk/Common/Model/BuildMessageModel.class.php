<?php
// +----------------------------------------------------------------------
// | FeelDesk-DEV开源工单管理系统
// +----------------------------------------------------------------------
// | 欢迎阅读学习系统程序代码，您的建议反馈是我们前进的动力
// | 开源版本仅供技术交流学习，请务必保留界面版权logo
// | 商业版本务必购买商业授权，以免引起法律纠纷
// | 禁止对系统程序代码以任何目的，任何形式的再发布
// | gitee下载：https://gitee.com/feelecs/feeldesk-os
// | 开源官网：https://www.feeldesk.com.cn
// | 成都菲莱克斯科技有限公司 版权所有 拥有最终解释权
// +----------------------------------------------------------------------
namespace Common\Model;


class BuildMessageModel extends BasicModel
{
    protected $autoCheckFields = false;

    protected static $_temp;

    protected static $_ticket_no;

    protected static $_ticket_title;

    protected static $_timeoutNum;

    protected static $_group_name;

    protected static $_category;//消息类型 handle 工单流转通知，urge 催单通知，end 工单结束通知

	protected static $_reject_content;//驳回工单原因

	protected static $_old_status;

	protected static $_new_status;

	protected static $_member_name;


    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub

	    self::$_category = 'handle';

        if(cookie('think_language') == 'en-us')
        {
            self::$_temp = C('TEMP_EN');
        }
        else if(cookie('think_language') == 'ja-jp')
        {
            self::$_temp = C('TEMP_JP');
        }
        else
        {
            self::$_temp = C('TEMP_CN');
        }
    }


    /*
    * 发布工单通知发布人和处理人
    * @param int    $ticket_id  工单ID
    */
    public function createTicketMessage($ticket_id = 0)
    {
//        工单信息
        $ticket = M('ticket')->where(['ticket_id'=>$ticket_id])->field('company_id,member_id,dispose_id,title,ticket_no,create_time')->find();

//        分配工单 —— 通知处理人
	    if($ticket['dispose_id'] > 0)
	    {
		    $this->assignDisposeMessage($ticket['dispose_id'],$ticket_id);
	    }
    }


	/*
	* 发布工单时通知抄送人
	* @param int    $company_id  公司ID
	* @param int    $ticket_id   工单ID
	* @param array  $ccIds       抄送人ID
	*/
	public function CcMessageByCreate($company_id,$ticket_id,$ccIds)
	{
//        获取通知配置
		$ticket_cc_notify = M('notify_config')->where(['company_id'=>$company_id])->getField('ticket_cc_notify');

		if($ticket_cc_notify == 10)
		{
			self::$_category = 'handle';

			$ticket = M('ticket')->where(['ticket_id'=>$ticket_id])->field('ticket_id,ticket_no,company_id,title')->find();

//            系统
			$this->buildSystemMessage('cc_ticket',1,$ccIds,$ticket['ticket_id'],$ticket['title']);
		}
	}


	/*
	 * 工单未分配处理人时 - 通知部门管理员
	 * @param int   $group_id   工单所属部门ID
	 * @param int   $ticket_id  工单ID
	 */
	public function NotifyToGroupManager($group_id,$ticket_id)
	{
		$group = M('group')->where(['group_id'=>$group_id])->field('manager_id,group_name,company_id')->find();

		self::$_group_name  = $group['group_name'];

		self::$_category    = 'handle';

//        部门管理员
		$manager = M('member')->where(['member_id'=>$group['manager_id']])
			->field('member_id,company_id,name,mobile,email')->find();

		$ticket = M('ticket')->field('company_id,title,ticket_no')->find($ticket_id);

//        系统
		if($manager['member_id'])
		{
			$this->buildSystemMessage('assign_group_manager',1,$manager['member_id'],$ticket_id,$ticket['title']);
		}
	}



	/*
	*  分配工单 - 通知处理人
	* @param int    $member_id     处理人ID
	* @param array  $ticket_id	    工单ID
	* @param int    $company_id    公司ID
	*/
	public function assignDisposeMessage($member_id,$ticket_id)
	{
		$ticket = M('ticket')->field('company_id,dispose_id,title,ticket_no')->find($ticket_id);

//        获取通知配置
		$notifyConfig = M('notify_config')->where(['company_id'=>$ticket['company_id']])->field('assign_notify_handle')->find();

//		  处理人信息
		$handler = M('Member')->where(['member_id'=>$member_id])->field('member_id,name,email,mobile')->find();

		if($handler)
		{
//            存储工单事件
			$eventData = ['event_type'=>'assign','ticket_id'=>$ticket_id,'member_id'=>$ticket['dispose_id']];

			D('TicketEvent')->saveEvent($eventData);

//            处理人收到的工单数+1
			M('member')->where(['member_id'=>$member_id])->setInc('receive_num');

//			  通知
			if($notifyConfig['assign_notify_handle'] == 10)
			{
                // 系统
				$this->buildSystemMessage('assign_ticket',1,$member_id,$ticket_id,$ticket['title']);
			}

//	        工单推送 - 向处理人客户端推送工单
			$param = ['ticket_id'=>$ticket_id,'company_id'=>$ticket['company_id']];

			D('PushMessage')->setUser($member_id)->setParam($param)->setPushType('newTicket')->push();
		}
	}



	/*
	*  分配子工单 - 通知处理人
	* @param int    $member_id     处理人ID
	* @param array  $ticket_id	   子工单ID
	* @param int    $company_id    公司ID
	* @param string $source        通知来源
	*/
	public function assignProcessMessage($member_id,$ticket_id)
	{
		$ticket = M('sub_ticket')->field('company_id,process_id,title,ticket_no')->find($ticket_id);

//		  处理人信息
		$handler = M('Member')->where(['member_id'=>$member_id])->field('member_id,name,email,mobile')->find();

		if($handler)
		{
            // 存储工单事件
			D('SubEvent')->saveEvent($ticket_id,'assign',$member_id);

            // 系统
			$this->buildSystemMessage('assign_ticket',1,$member_id,$ticket_id,$ticket['title'],0,'','',true);
		}
	}


	/*
	* 创建子工单通知信息 - 用于工单回复
	* @param int    $ticket_id     工单ID
	* @param int    $now_member_id 当前登录人的ID，0 非系统内用户
	* @param string $operate_type  操作类型，reply 工单回复，edit_ticket 修改工单
	*/
	public function buildSubMessage($ticket_id = 0,$now_member_id = 0,$operate_type = 'sub_reply')
	{
		$subTicket = M('sub_ticket')->field('ticket_id,title,ticket_no,company_id,status_id,member_id,process_id')->find($ticket_id);

//        发布人
		$publisher = M('member')->where(["member_id"=>$subTicket['member_id']])
			->field("member_id,name,mobile,email,type")->find();

//        获取通知配置
		$noticeConfig = M('notify_config')->where(['company_id'=>$subTicket['company_id']])->find();

//        回复通知
		if($operate_type == 'sub_reply')
		{
//            回复通知 - 发布人，自己回复不通知
			if($publisher['member_id'] != $now_member_id && $noticeConfig['reply_notify_publish'] == 10)
			{
//                系统
				$this->buildSystemMessage('reply_ticket',$publisher['type'],$publisher['member_id'],$subTicket['ticket_id'],$subTicket['title'],0,'','',true);
			}

//            回复通知 - 处理人
			if($subTicket['process_id'] > 0 && $subTicket['process_id'] != $now_member_id && $noticeConfig['reply_notify_handler'] == 10)
			{
//                系统
				$this->buildSystemMessage('dispose_reply_ticket',1,$subTicket['process_id'],$subTicket['ticket_id'],$subTicket['title'],0,'',0,true);
			}
		}
	}



	/*
	 * 创建通知信息 - 用于工单回复，内部协作回复，更新状态，重启工单等相关操作
	 * @param int    $ticket_id     工单ID
	 * @param array  $new_ccid      新的抄送人ID集合
	 * @param array  $old_ccid      原抄送人ID集合
	 * @param int    $status_id     原状态ID
	 * @param int    $now_member_id 当前登录人的ID，0 非系统内用户
	 * @param string $mail_from     消息来源，pc、customer、mobile、muser、weichat...等
	 * @param string $operate_type  操作类型，reply 工单回复，team_reply 内部协作，update_status 更新状态，restart_ticket 重启工单，edit_ticket 修改工单
	 */
	public function buildMessage($ticket_id = 0,$new_ccid = [],$old_ccid = [],$status_id = 0,$now_member_id = 0,$operate_type = 'reply')
	{
		$ticket = M('Ticket')->field('ticket_id,title,ticket_no,company_id,status_id,member_id,dispose_id')->find($ticket_id);

//        获取通知配置
		$noticeConfig = M('notify_config')->where(['company_id'=>$ticket['company_id']])->find();

//        工单状态
		$statusName = D('TicketStatus')->getNameByLang('status_name');

		$ticket_status = D('TicketStatus')->where(['company_id'=>$ticket['company_id']])->field("*,$statusName")->fetchAll();

		$oldStatus = $ticket_status[$status_id];//原工单状态

		$newStatus = $ticket_status[$ticket['status_id']];//当前工单状态

		self::$_old_status = "<span style='color:".$oldStatus['status_color']."'>".$oldStatus['lang_name']."</span>";

		self::$_new_status = "<span style='color:".$newStatus['status_color']."'>".$newStatus['lang_name']."</span>";

//		  关注人
		$follow = M('ticket_follow')->where(['company_id'=>$ticket['company_id'],'ticket_id'=>$ticket_id])->field('member_id')->select();

		if($follow)
		{
			$follow_member_id = array_column($follow,'member_id');

			$follower = M('member')->where(['member_id'=>['in',$follow_member_id]])->field("member_id,email,name,mobile")->select();
		}

//        发布人
		$publisher = M('member')->where(["member_id"=>$ticket['member_id']])->field("member_id,email,name,mobile,type")->find();

//        修改工单 - 发通知布人
		if($operate_type == 'editor_ticket' && $noticeConfig['editor_notify_publish'] == 10)
		{
//            系统
			$this->buildSystemMessage('editor_ticket',$publisher['type'],$publisher['member_id'],$ticket['ticket_id'],$ticket['title']);
		}

//        重启工单
		if($operate_type == 'restart_ticket' && $noticeConfig['restart_ticket_notify'] == 10)
		{
//            重启工单 - 通知处理人
			$this->buildSystemMessage('restart_ticket',1,$ticket['dispose_id'],$ticket['ticket_id'],$ticket['title']);

//            重启工单 - 通知关注人
			if($noticeConfig['restart_follow_notify'] == 10 && isset($follower))
			{
				foreach ($follower as $v)
				{
//			          系统消息
					$this->buildSystemMessage('follow_restart_ticket',1,$v['member_id'],$ticket['ticket_id'],$ticket['title']);
				}
			}
		}

//        回复评论 - 通知回复人
		if($operate_type == 'comment' && $noticeConfig['comment_reply_notify'] == 10)
		{
//            此时的$now_member_id是回复人ID
			$replyMember = M('member')->where(["member_id"=>$now_member_id])->field("member_id,email,name,mobile,type")->find();

//            系统
			$this->buildSystemMessage('comment_reply',$replyMember['type'],$replyMember['member_id'],$ticket['ticket_id'],$ticket['title']);
		}

//        工单状态改变
		if($operate_type == 'update_status')
		{
//            工单状态改变 - 通知发布人
			if($noticeConfig['status_notify_publish'] == 10)
			{
				if(($status_id != $ticket['status_id']) && ($publisher['member_id'] != $now_member_id))
				{
//					  系统
					$this->buildSystemMessage('editor_status',$publisher['type'],$publisher['member_id'],$ticket['ticket_id'],$ticket['title']);
				}
			}

//            工单状态改变 - 通知关注人
			if(isset($follower) && $noticeConfig['status_notify_follow'] == 10)
			{
				foreach ($follower as $v)
				{
//			          系统消息
					$this->buildSystemMessage('follow_editor_status',1,$v['member_id'],$ticket['ticket_id'],$ticket['title']);
				}
			}

//			  工单结束 - 通知发布人
			if($noticeConfig['end_notify_publish'] == 10)
			{
				$end_status_id = M('ticket_status')->where(['company_id'=>$ticket['company_id'],'is_end'=>1])->getField('status_id');

				if($end_status_id == $ticket['status_id'])
				{
					self::$_category = 'end';
				}
			}

//            工单结束 - 通知关注人
			if(isset($follower) && $noticeConfig['end_notify_follow'] == 10)
			{
				$end_status_id = M('ticket_status')->where(['company_id'=>$ticket['company_id'],'is_end'=>1])->getField('status_id');

				if($end_status_id == $ticket['status_id'])
				{
					self::$_category = 'end';

					foreach ($follower as $v)
					{
//			              系统消息
						$this->buildSystemMessage('follow_end_ticket',1,$v['member_id'],$ticket['ticket_id'],$ticket['title']);
					}
				}
			}
		}

//        回复通知
		if($operate_type == 'reply')
		{
//            回复通知 - 发布人，自己回复不通知
			if($publisher['member_id'] != $now_member_id)
			{
//				  通知
				if($noticeConfig['reply_notify_publish'] == 10)
				{
//                    系统
					$this->buildSystemMessage('reply_ticket',$publisher['type'],$publisher['member_id'],$ticket['ticket_id'],$ticket['title']);
				}

//	              工单推送 - 向发布人客户端推送最新回复及待回复工单
				$param = ['ticket_no'=>$ticket['ticket_no'],'ticket_id'=>$ticket_id,'company_id'=>$ticket['company_id']];

				D('PushMessage')->setUser($publisher['member_id'])->setParam($param)->setPushType('newReply')->push();
			}

//            回复通知 - 处理人
			if($ticket['dispose_id'] > 0 && $ticket['dispose_id'] != $now_member_id)
			{
//				  通知
				if($noticeConfig['reply_notify_handler'] == 10)
				{
//                    系统
					$this->buildSystemMessage('dispose_reply_ticket',1,$ticket['dispose_id'],$ticket['ticket_id'],$ticket['title']);
				}

//	              工单推送 - 向处理人客户端推送最新回复及待回复工单
				$param = ['ticket_no'=>$ticket['ticket_no'],'ticket_id'=>$ticket_id,'company_id'=>$ticket['company_id']];

				D('PushMessage')->setUser($ticket['dispose_id'])->setParam($param)->setPushType('newReply')->push();
			}

//            回复通知 - 原抄送人
			if($old_ccid && $noticeConfig['reply_notify_cc'] == 10)
			{
				$old_ccid = array_diff($old_ccid, [$now_member_id]);

				if($old_ccid)
				{
//                    系统
					$this->buildSystemMessage('cc_reply_ticket',1,$old_ccid,$ticket['ticket_id'],$ticket['title']);
				}
			}

//            回复通知 - 关注人
			if(isset($follower) && $noticeConfig['reply_notify_follow'] == 10)
			{
				foreach ($follower as $v)
				{
//			          系统消息
					$this->buildSystemMessage('follow_reply_ticket',1,$v['member_id'],$ticket['ticket_id'],$ticket['title']);
				}
			}
		}

//        内部协作通知
		if($operate_type == 'team_reply')
		{
//            团队回复通知 - 处理人
			if($ticket['dispose_id'] > 0 && $ticket['dispose_id'] != $now_member_id && $noticeConfig['internal_notify_handle'] == 10)
			{
//                系统
				$this->buildSystemMessage('dispose_team_reply',1,$ticket['dispose_id'],$ticket['ticket_id'],$ticket['title']);
			}

//            抄送通知 - 新抄送人
			if($new_ccid && $noticeConfig['ticket_cc_notify'] == 10)
			{
//                系统
				$this->buildSystemMessage('cc_ticket',1,$new_ccid,$ticket['ticket_id'],$ticket['title']);
			}

//            团队回复通知 - 原抄送人
			if($old_ccid && $noticeConfig['internal_notify_cc'] == 10)
			{
				$old_ccid = array_diff($old_ccid, [$now_member_id]);

				if($old_ccid)
				{
//                    系统
					$this->buildSystemMessage('cc_team_reply',1,$old_ccid,$ticket['ticket_id'],$ticket['title']);
				}
			}

//            团队回复通知 - 关注人
			if(isset($follower) && $noticeConfig['internal_notify_follow'] == 10)
			{
				foreach ($follower as $v)
				{
//			          系统消息
					$this->buildSystemMessage('follow_team_reply',1,$v['member_id'],$ticket['ticket_id'],$ticket['title']);
				}
			}
		}
	}


    /*
    * 创建系统通知
    * @param $msg_type		 消息模板类型
    * @param $type 	         消息接收人类型 1 用户 2 会员
    * @param $recipient_id	 消息接收人ID
    * @param $ticket_id		 工单ID
    * @param $title			 工单标题
    * @param $content		 催单内容
    * @param $urge_member_id 催办人ID
    * @param $type           通知工单类型，ticket 母工单，sub_ticket 子工单
    */
	public function buildSystemMessage($msg_type = '',$type = 0,$member_id = 0,$ticket_id = 0,$title = '',$timeoutNum = 0,$content = '',$urge_member_id = 0,$isSubTicket=false)
    {
//    	子工单
    	if($isSubTicket)
    	{
		    $url = "/subTicket/detail/id/".encrypt($ticket_id,'SUB_TICKET');

		    $ticket = M('sub_ticket')->where(['ticket_id'=>$ticket_id])->field('company_id,ticket_no')->find();
	    }
    	else
        {
		    $url = "/Ticket/detail/id/".encrypt($ticket_id,'TICKET');

		    $ticket = M('ticket')->where(['ticket_id'=>$ticket_id])->field('company_id,ticket_no')->find();
	    }

	    self::$_ticket_no = $ticket['ticket_no'];

        self::$_ticket_title = "<a href='javascript:' action='".$url."' mini='msgTicketDetail' data-tit='".$title."'><span style='color:#FF5722'>".$title."</span></a>";

        if(in_array($msg_type,['cc_ticket','cc_reply_ticket','cc_team_reply']))
        {
            if(!is_array($member_id))
            {
                $recipient_ids = explode(',',$member_id);
            }
            else
            {
                $recipient_ids = $member_id;
            }

            foreach($recipient_ids as $v)
            {
	            $template = $this->getSystemTemplate($msg_type);

	            if(count($template) > 0)
	            {
		            $data = [
		            	'company_id'    => $ticket['company_id'],
			            'msg_title'     => $template['title'],
			            'msg_content'   => $template['content'],
			            'recipient_id'  => $v,
			            'category'      => self::$_category,
			            'msg_type'      => $msg_type,
			            'msg_url'       => $url,
			            'recipient'     => $type,
			            'ticket_id'     => $ticket_id,
			            'create_time'   => NOW_TIME,
		            ];

		            $id = D('SystemMessage')->add($data);

//	                向客户端推送消息
		            $message = ['category'=>self::$_category,'id'=>$id,'title'=>$template['title'],'url'=>$url];

		            $result = D('PushMessage')->setUser($v)->setContent($message)->setPushType('systemMsg')->push();

//		            推送成功 - 改变提醒状态
		            if($result == 'Success')
		            {
			            D('SystemMessage')->where(['msg_id'=>$id])->setField('is_remind',2);
		            }
	            }
            }

            return true;
        }

	    if($timeoutNum)
	    {
			self::$_timeoutNum = $timeoutNum;

		    self::$_category = 'timeout';
	    }

		$template = $this->getSystemTemplate($msg_type,$content);

	    $msg = [
		    'company_id'    => $ticket['company_id'],
		    'ticket_id'     => $isSubTicket ? 0 : $ticket_id,
		    'sub_ticket_id' => $isSubTicket ? $ticket_id : 0,
		    'category'      => self::$_category,
		    'recipient_id'  => $member_id,
		    'recipient'     => $type,
		    'urge_member_id'=> $urge_member_id,
		    'msg_title'     => $template['title'],
		    'msg_content'   => $template['content'],
		    'msg_type'      => $msg_type,
		    'msg_url'       => $url,
		    'create_time'   => NOW_TIME
	    ];

	    $id = D('SystemMessage')->add($msg);

//	    向客户端推送消息
		$message = ['category'=>self::$_category,'id'=>$id,'title'=>$msg['msg_title'],'url'=>$url];

		$result = D('PushMessage')->setUser($member_id)->setContent($message)->setPushType('systemMsg')->push();

//		推送成功 - 改变提醒状态
		if($result == 'Success')
		{
			D('SystemMessage')->where(['msg_id'=>$id])->setField('is_remind',2);
		}

//		向APP推送消息
// 		if($app_client_id = M('member')->where(['member_id'=>$member_id])->getField('app_client_id'))
// 		{
// 			/**
// 			* 向App推送消息
// 			* msg_title 消息标题
// 			* msg_content 消息内容
// 			* $url 点击打开的URL
// 			* $app_client_id   接收方client_id
// 			* */
// 			// $result = D('PushMessageToApp')->pushMessageToSingle($msg['msg_title'],$msg['msg_content'],$url,$app_client_id);
// 		}

		return $id;

/*
		try {
			$msg_id = D('SystemMessage')->add($msg);

			if(!$msg_id)
			{
				throw new \Exception();
			}

			return $msg_id;
		}
		catch (\Exception $e)
		{
			$content = D('SystemMessage')->getDbError();

			$errorData = ['company_id'=>$ticket['company_id'],'error_type'=>'insert','error_title'=>'添加系统消息数据错误','error_content'=>$content];

			$log_id = M('error_log')->add($errorData);

			return ['error'=>1,'msg'=>'出现错误，请查看错误日志'];
		}
*/
    }



	/*
	* 获取系统消息模板
	* @param string $msg_type   模板类型
	* @param string $group_name	部门名称
	* @param string $content	消息内容
	* @return Array $data
	*/
	public function getSystemTemplate($msg_type,$content = '')
	{
		if($msg_type == 'timeout_ticket')
		{
			$template = self::$_temp['SYSTEM']['TIMEOUT_TICKET_MSG'];

			$msgTitle = str_replace('{{timeoutNum}}',self::$_timeoutNum,$template['title']);

			$msgContent = str_replace(['{{timeoutNum}}','{{url}}'],[self::$_timeoutNum,'/Ticket/timeoutTicket'],$template['content']);

			return ['title'=>$msgTitle,'content'=>"<div style='padding:10px;font-size:14px'>".$msgContent."</div>"];
		}
//		状态改变通知
		else if($msg_type == 'editor_status')
		{
			$template = self::$_temp['SYSTEM']['TICKET_STATUS_MSG'];
		}
		else if($msg_type == 'editor_ticket')
		{
			$template = self::$_temp['SYSTEM']['EDITOR_SYSTEM_MSG'];
		}
		else if($msg_type == 'end_ticket')
		{
			$template = self::$_temp['SYSTEM']['END_SYSTEM_MSG'];
		}
		else if($msg_type == 'assign_ticket')
		{
			$template = self::$_temp['SYSTEM']['ASSIGN_SYSTEM_MSG'];
		}
		else if($msg_type == 'reply_ticket')
		{
			$template = self::$_temp['SYSTEM']['REPLY_SYSTEM_MSG'];
		}
		else if($msg_type == 'dispose_reply_ticket')
		{
			$template = self::$_temp['SYSTEM']['HANDLE_SYSTEM_MSG'];
		}
		else if($msg_type == 'dispose_team_reply')
		{
			$template = self::$_temp['SYSTEM']['TEAM_SYSTEM_MSG'];
		}
		else if($msg_type == 'cc_ticket' )
		{
			$template = self::$_temp['SYSTEM']['CC_SYSTEM_MSG'];
		}
		else if($msg_type == 'cc_reply_ticket')
		{
			$template = self::$_temp['SYSTEM']['CC_REPLY_SYSTEM_MSG'];
		}
//		内部回复通知
		else if($msg_type == 'cc_team_reply')
		{
			$template = self::$_temp['SYSTEM']['CC_TEAM_SYSTEM_MSG'];
		}
//		未分配通知部门管理员
		else if($msg_type == 'assign_group_manager')
		{
			$template = self::$_temp['SYSTEM']['GROUP_SYSTEM_MSG'];
		}
//		重启工单
		else if($msg_type == 'restart_ticket')
		{
			$template = self::$_temp['SYSTEM']['RESTART_TICKET_MSG'];
		}
//		评论工单回复
		else if($msg_type == 'comment_reply')
		{
			$template = self::$_temp['SYSTEM']['COMMENT_REPLY_MSG'];
		}
//		催促工单
		else if($msg_type == 'urge_ticket')
		{
			self::$_category = 'urge';

			$template = self::$_temp['SYSTEM']['URGE_TICKET_MSG'];

			return ['title'=>$template['title'],'content'=>trim($content)];
		}
//		发布工单 - 审核
		else if($msg_type == 'audit_create_ticket')
		{
			$template = self::$_temp['SYSTEM']['AUDIT_CREATE_TICKET_MSG'];
		}
//		结束工单 - 审核
		else if($msg_type == 'audit_end_ticket')
		{
			$template = self::$_temp['SYSTEM']['AUDIT_END_TICKET_MSG'];
		}
//		发布工单 - 驳回
		else if($msg_type == 'reject_create_ticket')
		{
			$template = self::$_temp['SYSTEM']['REJECT_CREATE_TICKET_MSG'];
		}
//		结束工单 - 驳回
		else if($msg_type == 'reject_end_ticket')
		{
			$template = self::$_temp['SYSTEM']['REJECT_END_TICKET_MSG'];
		}
//		关注工单 - 重启
		else if($msg_type == 'follow_restart_ticket')
		{
			$template = self::$_temp['SYSTEM']['FOLLOW_RESTART_TICKET'];
		}
//		关注工单 - 状态改变
		else if($msg_type == 'follow_editor_status')
		{
			$template = self::$_temp['SYSTEM']['FOLLOW_EDITOR_STATUS'];
		}
//		关注工单 - 工单结束
		else if($msg_type == 'follow_end_ticket')
		{
			$template = self::$_temp['SYSTEM']['FOLLOW_END_TICKET'];
		}
//		关注工单 - 回复工单
		else if($msg_type == 'follow_reply_ticket')
		{
			$template = self::$_temp['SYSTEM']['FOLLOW_REPLY_TICKET'];
		}
//		关注工单 - 内部回复
		else if($msg_type == 'follow_team_reply')
		{
			$template = self::$_temp['SYSTEM']['FOLLOW_TEAM_REPLY'];
		}
		else
		{
			$template = [];
		}

		if($template)
		{
			$msgTitle = str_replace(['{{group_name}}','{{title}}','{{ticket_no}}'],[self::$_group_name,self::$_ticket_title,self::$_ticket_no],$template['title']);

			$msgContent = str_replace(
				['{{group_name}}','{{title}}','{{content}}','{{member_name}}','{{oldStatus}}','{{newStatus}}'],
				[self::$_group_name,self::$_ticket_title,self::$_reject_content,self::$_member_name,self::$_old_status,self::$_new_status],
				$template['content']
			);

			$data = ['title'=>$msgTitle,'content'=>"<div style='padding:10px;font-size:14px'>".$msgContent."</div>"];
		}
		else
		{
			$data = [];
		}

		return $data;
	}
}
